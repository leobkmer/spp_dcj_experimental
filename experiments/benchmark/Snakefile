# CONFIGURATION FILE ---------------------------------------------------------
configfile: 'config.yaml'
# ----------------------------------------------------------------------------

from os.path import abspath

# GENERAL VARIABLES ----------------------------------------------------------

SCRIPT_DIR          = config.get('script_dir', '../../scripts')
OLD_SCRIPTS         = config.get('old_scripts', '../../oldscripts')

BENCHMARK_DIR       = config.get('benchmark_dir', 'benchmarks')
DECO_DIR            = config.get('deco_dir', 'deco')
GUROBI_BIN          = config.get('gurobi_bin', 'gurobi_cl')
ILP_DIR             = config.get('ilp_dir', 'ilp')
LOG_DIR             = config.get('log_dir', 'logs')
PLOT_DIR            = config.get('plot_dir', 'plots')
RECPHYLOXML_PATH    = config.get('recphyloxml_dir')
RESULT_DIR          = config.get('result_dir', 'results')
SIMULATION_DIR      = config.get('simulated_evolution_dir', 'simulated_evolution')
TREE_DIR            = config.get('tree_dir', 'trees')
N_REPS = config.get('n_reps',10)
REPLICATES = list(range(1,N_REPS+1))

# ZOMBI TREE EVOLUTION PARAMETERS -------------------------------------------

TREE                = config.get('tree')
TREE_SCALES         = config.get('tree_scales', [1])

# ZOMBI GENOME EVOLUTION PARAMETERS -----------------------------------------

ZOMBI_BIN           = config.get('zombi_bin')
ZOMBI_DUPLS         = config.get('zombi_dupl_rates', ['f:1'])
ZOMBI_DUPL_EXTS     = config.get('zombi_dupl_exts', ['g:1'])
ZOMBI_GENOME_SIZES  = config.get('zombi_genome_sizes', [100])
ZOMBI_LOSSES        = config.get('zombi_loss_rates', ['f:3'])
ZOMBI_LOSS_EXTS     = config.get('zombi_loss_exts', ['g:1'])
ZOMBI_ORIGINS       = config.get('zombi_origin_rates', ['f:2'])
ZOMBI_REARRS        = config.get('zombi_rearr_rates', ['f:2'])
ZOMBI_REARR_EXTS    = config.get('zombi_rearr_exts', ['g:0.05'])

# DECO PARAMETERS
DECO_BIN            = abspath(config.get('deco_bin'))
DECO_BOLTZMANN_TEMP = config.get('deco_boltzmann_temperature', 0)
DECO_BOLTZMANN_SAMP = config.get('deco_boltzmann_samples', 1)

# NOISY ADJACENCIES PARAMETERS -----------------------------------------------

ADJ_NOISE           = config.get('adjacency_noise', [30])
ADJ_ADVNOISE        = config.get('adjacency_adversarial_noise', [50])

# ----------------------------------------------------------------------------

from os.path import basename

rule all_benchmark:
    input:
        expand(f'{BENCHMARK_DIR}/rep{{replicate}}_dr{{dupl}}_de{{dupl_ext}}' +
            '_gs{genome_size}_lr{loss}_le{loss_ext}_or{origin}_rr{rearr}' +
            '_re{rearr_ext}_s{tree_scale}.{no}_Deco_gurobi.log',
            dupl = ZOMBI_DUPLS, dupl_ext = ZOMBI_DUPL_EXTS, genome_size =
            ZOMBI_GENOME_SIZES, loss = ZOMBI_LOSSES, loss_ext =
            ZOMBI_LOSS_EXTS, origin = ZOMBI_ORIGINS, rearr = ZOMBI_REARRS,
            rearr_ext = ZOMBI_REARR_EXTS, tree_scale = TREE_SCALES,no=['new','old'],replicate=REPLICATES)

# INITIAL RULE ---------------------------------------------------------------
rule all:
    input:
        expand(f'{SIMULATION_DIR}/dr{{dupl}}_de{{dupl_ext}}' +
            '_gs{genome_size}_lr{loss}_le{loss_ext}_or{origin}_rr{rearr}' +
            '_re{rearr_ext}_s{tree_scale}/EventCounts.txt',
            dupl = ZOMBI_DUPLS, dupl_ext = ZOMBI_DUPL_EXTS, genome_size =
            ZOMBI_GENOME_SIZES, loss = ZOMBI_LOSSES, loss_ext =
            ZOMBI_LOSS_EXTS, origin = ZOMBI_ORIGINS, rearr = ZOMBI_REARRS,
            rearr_ext = ZOMBI_REARR_EXTS, tree_scale = TREE_SCALES),

        # 
        # Noisy Adjacencies
        # 
#        expand(f'{PLOT_DIR}/dr{{dupl}}_de{{dupl_ext}}' +
#            '_gs{genome_size}_lr{loss}_le{loss_ext}_or{origin}_rr{rearr}' +
#            '_re{rearr_ext}_s{tree_scale}/AdjacenciesNoisy_n{noise}_adv{adv}.pdf',
#            dupl = ZOMBI_DUPLS, dupl_ext = ZOMBI_DUPL_EXTS, genome_size =
#            ZOMBI_GENOME_SIZES, loss = ZOMBI_LOSSES, loss_ext =
#            ZOMBI_LOSS_EXTS, origin = ZOMBI_ORIGINS, rearr = ZOMBI_REARRS,
#            rearr_ext = ZOMBI_REARR_EXTS, tree_scale = TREE_SCALES, noise =
#            ADJ_NOISE, adv = ADJ_ADVNOISE),
        expand(f'{RESULT_DIR}/dr{{dupl}}_de{{dupl_ext}}' +
            '_gs{genome_size}_lr{loss}_le{loss_ext}_or{origin}_rr{rearr}' +
            '_re{rearr_ext}_s{tree_scale}/PrecisionRecall_{no}_Noisy_n{noise}_adv{adv}.txt',
            dupl = ZOMBI_DUPLS, dupl_ext = ZOMBI_DUPL_EXTS, genome_size =
            ZOMBI_GENOME_SIZES, loss = ZOMBI_LOSSES, loss_ext =
            ZOMBI_LOSS_EXTS, origin = ZOMBI_ORIGINS, rearr = ZOMBI_REARRS,
            rearr_ext = ZOMBI_REARR_EXTS, tree_scale = TREE_SCALES, noise =
            ADJ_NOISE, adv = ADJ_ADVNOISE,no=['new','old']),
#        expand(f'{PLOT_DIR}/dr{{dupl}}_de{{dupl_ext}}' +
#            '_gs{genome_size}_lr{loss}_le{loss_ext}_or{origin}_rr{rearr}' +
#            '_re{rearr_ext}_s{tree_scale}/AdjacenciesPredicted_Noisy_n{noise}_adv{adv}.pdf',
#            dupl = ZOMBI_DUPLS, dupl_ext = ZOMBI_DUPL_EXTS, genome_size =
#            ZOMBI_GENOME_SIZES, loss = ZOMBI_LOSSES, loss_ext =
#            ZOMBI_LOSS_EXTS, origin = ZOMBI_ORIGINS, rearr = ZOMBI_REARRS,
#            rearr_ext = ZOMBI_REARR_EXTS, tree_scale = TREE_SCALES, noise =
#            ADJ_NOISE, adv = ADJ_ADVNOISE),

        #
        # Deco Adjacencies
        #
#        expand('{}/dr{{dupl}}_de{{dupl_ext}}'.format(PLOT_DIR) +
#            '_gs{genome_size}_lr{loss}_le{loss_ext}_or{origin}_rr{rearr}' +
#            '_re{rearr_ext}_s{tree_scale}/AdjacenciesDeco.pdf',
#            dupl = ZOMBI_DUPLS, dupl_ext = ZOMBI_DUPL_EXTS, genome_size =
#            ZOMBI_GENOME_SIZES, loss = ZOMBI_LOSSES, loss_ext =
#            ZOMBI_LOSS_EXTS, origin = ZOMBI_ORIGINS, rearr = ZOMBI_REARRS,
#            rearr_ext = ZOMBI_REARR_EXTS, tree_scale = TREE_SCALES, noise =
#            ADJ_NOISE, adv = ADJ_ADVNOISE),
        expand('{}/dr{{dupl}}_de{{dupl_ext}}'.format(RESULT_DIR) +
            '_gs{genome_size}_lr{loss}_le{loss_ext}_or{origin}_rr{rearr}' +
            '_re{rearr_ext}_s{tree_scale}/PrecisionRecall_{no}_Deco.txt',
            dupl = ZOMBI_DUPLS, dupl_ext = ZOMBI_DUPL_EXTS, genome_size =
            ZOMBI_GENOME_SIZES, loss = ZOMBI_LOSSES, loss_ext =
            ZOMBI_LOSS_EXTS, origin = ZOMBI_ORIGINS, rearr = ZOMBI_REARRS,
            rearr_ext = ZOMBI_REARR_EXTS, tree_scale = TREE_SCALES,no=['new','old']),
#        expand('{}/dr{{dupl}}_de{{dupl_ext}}'.format(PLOT_DIR) +
#            '_gs{genome_size}_lr{loss}_le{loss_ext}_or{origin}_rr{rearr}' +
#            '_re{rearr_ext}_s{tree_scale}/AdjacenciesPredicted_Deco.pdf',
#            dupl = ZOMBI_DUPLS, dupl_ext = ZOMBI_DUPL_EXTS, genome_size =
#            ZOMBI_GENOME_SIZES, loss = ZOMBI_LOSSES, loss_ext =
#            ZOMBI_LOSS_EXTS, origin = ZOMBI_ORIGINS, rearr = ZOMBI_REARRS,
#            rearr_ext = ZOMBI_REARR_EXTS, tree_scale = TREE_SCALES, noise =
#            ADJ_NOISE, adv = ADJ_ADVNOISE),


        #
        # Deco and True Adjacencies
        #
        #expand('{}/dr{{dupl}}_de{{dupl_ext}}'.format(PLOT_DIR) +
        #    '_gs{genome_size}_lr{loss}_le{loss_ext}_or{origin}_rr{rearr}' +
        #    '_re{rearr_ext}_s{tree_scale}/AdjacenciesDecoAndTrue.pdf',
        #    dupl = ZOMBI_DUPLS, dupl_ext = ZOMBI_DUPL_EXTS, genome_size =
        #    ZOMBI_GENOME_SIZES, loss = ZOMBI_LOSSES, loss_ext =
        #    ZOMBI_LOSS_EXTS, origin = ZOMBI_ORIGINS, rearr = ZOMBI_REARRS,
        #    rearr_ext = ZOMBI_REARR_EXTS, tree_scale = TREE_SCALES, noise =
        #    ADJ_NOISE, adv = ADJ_ADVNOISE),
        expand('{}/dr{{dupl}}_de{{dupl_ext}}'.format(RESULT_DIR) +
            '_gs{genome_size}_lr{loss}_le{loss_ext}_or{origin}_rr{rearr}' +
            '_re{rearr_ext}_s{tree_scale}/PrecisionRecall_{no}_DecoAndTrue.txt',
            dupl = ZOMBI_DUPLS, dupl_ext = ZOMBI_DUPL_EXTS, genome_size =
            ZOMBI_GENOME_SIZES, loss = ZOMBI_LOSSES, loss_ext =
            ZOMBI_LOSS_EXTS, origin = ZOMBI_ORIGINS, rearr = ZOMBI_REARRS,
            rearr_ext = ZOMBI_REARR_EXTS, tree_scale = TREE_SCALES,no=['new','old']),

# -----------------------------------------------------------------------------

rule rescale_tree:
    input:
        TREE
    output:
       f'{TREE_DIR}/s{{scale,[0-9.]+}}.nwk'
    shell:
        f'{SCRIPT_DIR}/rescale.py -s{{wildcards.scale}} {{input}} > {{output}}'


rule zombi_generate_tree_events:
    input:
        tree = f'{TREE_DIR}/s{{scale}}.nwk',
        gp = f'{SIMULATION_DIR}/rep{{rep}}_{{experiment}}_s{{scale}}/GenomeParameters.tsv'
    output:
        events = f'{SIMULATION_DIR}/rep{{rep}}_{{experiment,[^/]+}}' +
                '_s{scale,[0-9.]+}/T/Events.tsv',
        tree = f'{SIMULATION_DIR}/rep{{rep}}_{{experiment,[^/]+}}' +
                '_s{scale,[0-9.]+}/T/CompleteTree.nwk',
    log:
        f'{LOG_DIR}/zombi_tree_events_rep{{rep}}_{{experiment}}_s{{scale}}.log'
    shell:
        f'{ZOMBI_BIN} Ti {{input.tree}} ' +
        '$(dirname {input.gp}) > {log}'


rule zombi_generate_genome_params:
    output:
        f'{SIMULATION_DIR}/rep{{rep}}_dr{{dupl,[efglnu]:[0-9.]+}}' +
        '_de{dupl_ext,[efglnu]:[0-9.]+}_gs{genome_size,\\d+}'
        '_lr{loss,[efglnu]:[0-9.]+}_le{loss_ext,[efglnu]:[0-9.]+}'
        '_or{origin,[efglnu]:[0-9.]+}_rr{rearr,[efglnu]:[0-9.]+}'
        '_re{rearr_ext,[efglnu]:[0-9.]+}_s{scale,[0-9.]+}/GenomeParameters.tsv'
    run:
        zombi_config = """### PARAMETERS GENOME LEVEL ###
DUPLICATION {dupl}
DUPLICATION_EXTENSION {dupl_ext}
EVENTS_PER_BRANCH 1
GENE_LENGTH 0
GENE_TREES 1
INITIAL_GENOME_SIZE {genome_size}
INVERSION {rearr}
INVERSION_EXTENSION {rearr_ext}
MIN_GENOME_SIZE 10
LOSS {loss}
LOSS_EXTENSION {loss_ext}
ORIGINATION {origin}
PROFILES 0
RATE_FILE False
RECONCILED_TREES 1
SCALE_TREE 0
SEED 0
TRANSFER f:0
TRANSPOSITION {rearr}
TRANSPOSITION_EXTENSION {rearr_ext}
VERBOSE 1""".format(**wildcards)
        with open(output[0], 'w') as out:
            out.write(zombi_config)


rule zombi_simulate_genomes:
    input:
        gp = f'{SIMULATION_DIR}/{{experiment}}/GenomeParameters.tsv',
        events = f'{SIMULATION_DIR}/{{experiment}}/T/Events.tsv',
    output:
        gp = f'{SIMULATION_DIR}/{{experiment,[^/]+}}/G/GenomeParameters.tsv',
    log:
         f'{LOG_DIR}/zombi_simulate_genomes_{{experiment,[^/]+}}.log',
    shell:
        f'{ZOMBI_BIN} G {{input.gp}} $(dirname {{input.gp}})' +
        ' > {log}'


rule display_events:
    input:
        events = f'{SIMULATION_DIR}/{{experiment}}/T/Events.tsv',
        gp = f'{SIMULATION_DIR}/{{experiment}}/G/GenomeParameters.tsv',
    output:
        f'{SIMULATION_DIR}/{{experiment,[^/]+}}/EventCounts.txt',
    shell:
        f'{SCRIPT_DIR}/displayEventCounts.py {{input.events}} ' +
        '$(dirname {input.gp})/Events_per_branch > {output}'


rule nwk_to_tabular:
    input:
        tree = f'{SIMULATION_DIR}/{{experiment}}/T/CompleteTree.nwk',
    output:
        f'{SIMULATION_DIR}/{{experiment,[^/]+}}/SpTree.txt',
    shell:
        f'{SCRIPT_DIR}/nwk2tabular.py {{input}} > {{output}}'


rule genomes_to_gene_order:
    input:
        f'{SIMULATION_DIR}/{{experiment}}/G/GenomeParameters.tsv',
    output:
        f'{SIMULATION_DIR}/{{experiment,[^/]+}}/GeneOrders.txt',
    shell:
        f'{SCRIPT_DIR}/genomes2geneorders.py ' +
        '$(dirname {input})/Genomes/* > {output}'


rule gene_order_to_true_adjacencies:
    input:
        f'{SIMULATION_DIR}/{{experiment}}/GeneOrders.txt',
    output:
        f'{SIMULATION_DIR}/{{experiment,[^/]+}}/AdjacenciesTrue.txt',
    shell:
        f'{SCRIPT_DIR}/data_utils.py {{input}} {{output}}'


rule noisy_adjacencies:
    input:
        tree = f'{SIMULATION_DIR}/{{experiment}}/SpTree.txt',
        adj  = f'{SIMULATION_DIR}/{{experiment}}/AdjacenciesTrue.txt',
    output:
        f'{RESULT_DIR}/{{experiment,[^/]+}}/AdjacenciesNoisy' +
        '_n{noise,[0-9]+}_adv{adv,[0-9.]+}.txt'
    log:
        f'{LOG_DIR}/noisy_adjacencies_{{experiment}}' +
        '_n{noise,[0-9]+}_adv{adv,[0-9.]+}.log'
    shell:
        f'{SCRIPT_DIR}/noisy_adjacencies.py {{input.tree}} ' +
        '{input.adj} {wildcards.noise} {wildcards.adv} {output} 2> {log}'


rule zombi_to_deco:
    input:
        f'{SIMULATION_DIR}/{{experiment}}/AdjacenciesTrue.txt',
    output:
        f'{DECO_DIR}/{{experiment}}/parameters_exp.txt',
        f'{DECO_DIR}/{{experiment}}/adjacencies_exp',
        f'{DECO_DIR}/{{experiment}}/list_gene_trees_exp',
        f'{DECO_DIR}/{{experiment}}/species_tree',
    params:
        boltz_temp = DECO_BOLTZMANN_TEMP,
        boltz_samp = DECO_BOLTZMANN_SAMP
    shell:
        f'{SCRIPT_DIR}/zombi_to_decostar_sampling.py $(dirname {{input}}) ' +
        '$(dirname {output[0]}) exp rec {params.boltz_temp} '
        '{params.boltz_samp}'


rule prune_genetrees:
    input:
        treelist = f'{DECO_DIR}/{{experiment}}/list_gene_trees_exp',
        param = f'{DECO_DIR}/{{experiment}}/parameters_exp.txt',
    output:
        param = f'{DECO_DIR}/{{experiment}}/parameters_pruned.txt',
        treelist = f'{DECO_DIR}/{{experiment}}/list_gene_trees_pruned',
    shell:
        f'export PYTHONPATH={RECPHYLOXML_PATH};' +
        'while read LINE; do'
        '   A=$(dirname {input.param});'
        '   NEW=${{LINE%.xml}}_pruned.xml;' +
        f'   python3 {SCRIPT_DIR}/prune_reconciled_genetrees.py $A/$LINE > $A/$NEW;' +
        '   echo $NEW >> {output.treelist};'
        'done < {input.treelist};'
        'sed "s/$(basename {input.treelist})/$(basename {output.treelist})/" '
        '{input.param} > {output.param}'

rule run_deco:
    input:
        param_file = f'{DECO_DIR}/{{experiment}}/parameters_pruned.txt',
    output:
        adj = f'{DECO_DIR}/{{experiment}}/exp.adjacencies.txt',
        rec = f'{DECO_DIR}/{{experiment}}/exp.reconciliations.newick',
        sp  = f'{DECO_DIR}/{{experiment}}/exp.species.txt',
        gen = f'{DECO_DIR}/{{experiment}}/exp.genes.txt',
    log:
        f'{LOG_DIR}/{basename(DECO_BIN)}_{{experiment}}.log'
    shell:
        'CUR_DIR=$(pwd); cd $(dirname {input.param_file});' +
        f'{DECO_BIN} params=$(basename {{input.param_file}})' +
        ' &> $CUR_DIR/{log}; cd $CUR_DIR'


rule convert_deco_adjacencies:
    input:
        gen = f'{DECO_DIR}/{{experiment}}/exp.genes.txt',
        adj = f'{DECO_DIR}/{{experiment}}/exp.adjacencies.txt',
        rec = f'{DECO_DIR}/{{experiment}}/exp.reconciliations.newick',
    output:
        f'{RESULT_DIR}/{{experiment}}/AdjacenciesDeco.txt',
    log:
        f'{LOG_DIR}/decoadj2adj_{{experiment}}.log',
    shell:
        # complement adjacencies with zero-adjacencies:
        #f'{SCRIPT_DIR}/decoadj2adj.py -c {{input.adj}} {{input.gen}} ' +
        f'{SCRIPT_DIR}/decoadj2adj.py {{input.adj}} {{input.gen}} ' +
        '{input.rec} > {output} 2> {log}'

rule deco_and_true_adjacencies:
    input:
        adj  = f'{SIMULATION_DIR}/{{experiment}}/AdjacenciesTrue.txt',
        deco = f'{RESULT_DIR}/{{experiment}}/AdjacenciesDeco.txt',
    output:
        f'{RESULT_DIR}/{{experiment,[^/]+}}/AdjacenciesDecoAndTrue.txt'
    shell:
        f'{SCRIPT_DIR}/merge_adjs.py {{input.adj}} {{input.deco}} > {{output}}'

rule visualize_candidate_adjacencies:
    input:
        f'{RESULT_DIR}/{{experiment}}/Adjacencies{{params}}.txt'
    output:
        f'{PLOT_DIR}/{{experiment}}/Adjacencies{{params,(?!Predicted).+}}.pdf',
    shell:
        f'{SCRIPT_DIR}/visualize_genomes.py {{input}} > {{output}}'


rule construct_ilp:
    input:
        tree = f'{SIMULATION_DIR}/{{experiment}}/SpTree.txt',
        candAdj = f'{RESULT_DIR}/{{experiment}}/Adjacencies{{params}}.txt',
    output:
        ilp = temp(f'{ILP_DIR}/{{experiment,[^/]+}}/SPP_DCJ_new_{{params}}.ilp'),
        idMap = f'{ILP_DIR}/{{experiment}}/IdToExtremity_new_{{params}}.txt',
    log:
        f'{LOG_DIR}/{{experiment}}_new_{{params}}_spp_dcj.log',
    shell:
        f'{SCRIPT_DIR}/spp_dcj.py -a0.5 -m {{output.idMap}} {{input.tree}} '+
        '{input.candAdj} > {output.ilp} 2> {log}'

rule construct_old_ilp:
    input:
        tree = f'{SIMULATION_DIR}/{{experiment}}/SpTree.txt',
        candAdj = f'{RESULT_DIR}/{{experiment}}/Adjacencies{{params}}.txt',
    output:
        ilp = temp(f'{ILP_DIR}/{{experiment,[^/]+}}/SPP_DCJ_old_{{params}}.ilp'),
        idMap = f'{ILP_DIR}/{{experiment}}/IdToExtremity_old_{{params}}.txt',
    log:
        f'{LOG_DIR}/{{experiment}}_old_{{params}}_spp_dcj.log',
    shell:
        f'{OLD_SCRIPTS}/spp_dcj.py -a0.5 -m {{output.idMap}} {{input.tree}} '+
        '{input.candAdj} > {output.ilp} 2> {log}'


rule run_ilp:
    input:
        ilp = f'{ILP_DIR}/{{experiment}}/SPP_DCJ_{{params1}}.ilp',
    output:
        f'{ILP_DIR}/{{experiment,[^/]+}}/SPP_DCJ_{{params1}}.sol',
    params:
        time_limit = 120 * 60,
        threads = 1
    threads:
        1
    log:
        f'{LOG_DIR}/{{experiment}}_{{params1}}_gurobi.log',
    benchmark:
        f'{BENCHMARK_DIR}/{{experiment}}.{{params1}}_gurobi.log'
    shell:
        f'{GUROBI_BIN} ResultFile={{output}} Threads={{params.threads}} ' +
        'TimeLimit={params.time_limit} {input} > {log}'


rule sol_to_adjacencies:
    input:
        sol = f'{ILP_DIR}/{{experiment}}/SPP_DCJ_new_{{params}}.sol',
        idMap = f'{ILP_DIR}/{{experiment}}/IdToExtremity_new_{{params}}.txt',
    output:
        f'{RESULT_DIR}/{{experiment,[^/]+}}/AdjacenciesPredicted_new_{{params}}.txt'
    shell:
        f'{SCRIPT_DIR}/sol2adjacencies.py {{input.sol}} ' +
        '{input.idMap} > {output}'

rule old_sol_to_adjacencies:
    input:
        sol = f'{ILP_DIR}/{{experiment}}/SPP_DCJ_old_{{params}}.sol',
        idMap = f'{ILP_DIR}/{{experiment}}/IdToExtremity_old_{{params}}.txt',
    output:
        f'{RESULT_DIR}/{{experiment,[^/]+}}/AdjacenciesPredicted_old_{{params}}.txt'
    shell:
        f'{OLD_SCRIPTS}/sol2adjacencies.py {{input.sol}} ' +
        '{input.idMap} > {output}'

rule evaluate_predicted_adjacencies:
    input:
        tree = f'{SIMULATION_DIR}/{{experiment}}/SpTree.txt',
        trueAdj= f'{SIMULATION_DIR}/{{experiment}}/AdjacenciesTrue.txt',
        predAdj= f'{RESULT_DIR}/{{experiment}}/AdjacenciesPredicted_{{params}}.txt',
    output:
        f'{RESULT_DIR}/{{experiment,[^/]+}}/PrecisionRecall_{{params}}.txt',
    shell:
        f'{SCRIPT_DIR}/spp_utils.py {{input.tree}} {{input.predAdj}} ' +
        '{input.trueAdj} > {output}'


rule visualize_predicted_adjacencies:
    input:
        candAdj  = f'{RESULT_DIR}/{{experiment}}/Adjacencies{{params}}txt',
        predAdj  = f'{RESULT_DIR}/{{experiment}}/AdjacenciesPredicted_{{params}}txt',
    output:
        f'{PLOT_DIR}/{{experiment}}/AdjacenciesPredicted_{{params,\\w+\\.|\\.}}pdf',
    shell:
        f'{SCRIPT_DIR}/visualize_genomes.py -i {{input.predAdj}} ' +
        '{input.candAdj} > {output}'

