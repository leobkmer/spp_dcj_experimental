import os

# CONFIGURATION FILE ---------------------------------------------------------
configfile: "config.yaml"
# ----------------------------------------------------------------------------

SAMPLES = config["samples"]
SCRIPT_DIR          = config.get("script_dir", "../../scripts")
INPUT = config.get("input", "input")
OUTPUT = config.get("output", "output")
GUROBI_PYTHON = config.get("gurobipy","python3")
ILP_THREADS = config.get("ilp_threads",10)
ILP_TIMELIM = config.get("ilp_timelim",3600)

def get_ranges(sample):
    if os.path.exists(INPUT+"/ranges"):
        return INPUT+"/ranges/{sample}_range.tsv"
    else:
        return OUTPUT+"/mranges/{sample}.txt"


rule all_ilp_sol:
    input:
        expand(OUTPUT+"/sol/{sample}.sol",sample=SAMPLES)

rule all_adj:
    input:
        expand(OUTPUT+"/full_adj/{sample}.txt",sample=SAMPLES)

rule all_trees:
    input:
        expand(OUTPUT+"/cptrees/{sample}.txt",sample=SAMPLES)

rule all_ilp:
    input:
        expand(OUTPUT+"/ilp/{sample}.ilp",sample=SAMPLES)

rule construct_ilp:
    input:
        tree = OUTPUT+"/cptrees/{sample}.txt",
        candAdj = OUTPUT+"/full_adj/{sample}.txt",
        mrange= lambda wildcards: get_ranges(wildcards.sample)
    output:
        ilp = OUTPUT+"/ilp/{sample}.ilp",
        idMap = OUTPUT+"/ilp/{sample}_ids.txt",
        #start = OUTPUT+"/ilp/{sample}_init.sol"
    resources:
        mem_mb=lambda wildcards, attempt: 10000*attempt
    log:
        OUTPUT+"/ilp/{sample}.log",
    shell:
        "%s/spp_dcj.py -a 1 -m {output.idMap} {input.tree} -fmb {input.mrange} "%SCRIPT_DIR+
        "{input.candAdj} --no_telomeres > {output.ilp} 2> {log}"


rule get_range:
    input:
        tree = OUTPUT+"/cptrees/{sample}.txt",
        candAdj = OUTPUT+"/full_adj/{sample}.txt"
    output:
        OUTPUT+"/mranges/{sample}.txt"
    shell:
        "python3 %s/apply_full_range.py {input.tree} {input.candAdj} > {output}"%SCRIPT_DIR


rule run_ilp_warm:
    input:
        ilp = OUTPUT+"/ilp/{sample}.ilp",
        #start=OUTPUT+"/ilp/{sample}_init.sol"
    output:
        OUTPUT+"/sol/{sample}.sol",
    params:
        time_limit = ILP_TIMELIM
    threads:
        ILP_THREADS
    resources:
        mem_mb=lambda wildcards, attempt: 10000*attempt
    log:
        OUTPUT+"/sol/{sample}.log",
    shell:
        "%s %s/gurobi_sequential.py {input.ilp} {output} --timelim {params.time_limit} -t {threads} > {log}"%(GUROBI_PYTHON,SCRIPT_DIR)


rule named_to_tab:
    input:
        INPUT+"/relabelled_trees/{sample}.nw"
    output:
        OUTPUT+"/cptrees/{sample}.txt"
    shell:
        "%s/nwk2tabular.py {input} > {output}"%SCRIPT_DIR


rule clean_unimog:
    input:
        INPUT+"/unimogs/{sample}.unimog"
    output:
        OUTPUT+"/unimogc/{sample}.unimog"
    shell:
        "python3 %s/clean_plasmid_unimog.py {input} > {output}"%SCRIPT_DIR

rule leaves_to_adj:
    input:
        OUTPUT+"/unimogc/{sample}.unimog"
    output:
        OUTPUT+"/leaf_adj/{sample}.txt"
    shell:
        "%s/unimog2adjacencies.py {input} > {output}"%SCRIPT_DIR

rule add_all_adj:
    input:
        adj=OUTPUT+"/leaf_adj/{sample}.txt",
        tree=OUTPUT+"/cptrees/{sample}.txt",
        mranges=lambda wildcards: get_ranges(wildcards.sample)
    output:
        OUTPUT+"/full_adj/{sample}.txt"
    log:
        OUTPUT+"/full_adj/{sample}.log"
    shell:
        "%s/add_all_adjacencies_inner.py {input.tree} {input.adj} {input.mranges} > {output} 2> {log}"%SCRIPT_DIR