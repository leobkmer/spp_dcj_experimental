# CONFIGURATION FILE ---------------------------------------------------------
configfile: 'config.yaml'
# ----------------------------------------------------------------------------

SAMPLES = config['samples']
SCRIPT_DIR          = config.get('script_dir', '../../scripts')


rule all_ilp_sol:
    input:
        expand('sol/{sample}.sol',sample=SAMPLES)

rule all_adj:
    input:
        expand('full_adj/{sample}.txt',sample=SAMPLES)

rule all_trees:
    input:
        expand('cptrees/{sample}.txt',sample=SAMPLES)



rule construct_ilp:
    input:
        tree = 'cptrees/{sample}.txt',
        candAdj = 'full_adj/{sample}.txt',
        plb = 'bounds/workdir_{sample}/bounds.txt',
        mrange='data/ranges/{sample}.txt'
    output:
        ilp = 'ilp/{sample}.ilp',
        idMap = 'ilp/{sample}_ids.txt',
        start = 'ilp/{sample}_init.sol'
    log:
        'ilp/{sample}.log',
    shell:
        '%s/spp_dcj.py -a 1 -m {output.idMap} {input.tree} -fmb {input.mrange} '%SCRIPT_DIR+
        '{input.candAdj} -ws {output.start} -plb {input.plb} --no_telomeres > {output.ilp} 2> {log}'


rule run_lower_bounds:
    input:
        tree = 'cptrees/{sample}.txt',
        candAdj = 'full_adj/{sample}.txt',
        mrange='data/ranges/{sample}.txt'
    output:
        'bounds/workdir_{sample}/bounds.txt'

    shell:
        'python3 %s/precompute_ding.py bounds/workdir_{wildcards.sample}/ -fmb {input.mrange} '%SCRIPT_DIR+
        '{input.tree} {input.candAdj} {output} --mode linear --total-timelimit 3600'


rule run_ilp_warm:
    input:
        ilp = 'ilp/{sample}.ilp',
        start='ilp/{sample}_init.sol'
    output:
        'sol/{sample}.sol',
    params:
        time_limit = 5 * 60,
    threads:
        20
    log:
        'sol/{sample}.log',
    shell:
        'gurobi_cl InputFile={input.start} ResultFile={output} Threads={threads} ' +
        'TimeLimit={params.time_limit} {input.ilp} > {log}'


rule named_to_tab:
    input:
        'relabelled/trees/{sample}.nw'
    output:
        'cptrees/{sample}.txt'
    shell:
        '%s/nwk2tabular.py {input} > {output}'%SCRIPT_DIR


rule clean_unimog:
    input:
        'data/unimogs/{sample}.unimog'
    output:
        'unimogc/{sample}.unimog'
    shell:
        'python3 %s/clean_plasmid_unimog.py {input} > {output}'%SCRIPT_DIR

rule leaves_to_adj:
    input:
        'unimogc/{sample}.unimog'
    output:
        'leaf_adj/{sample}.txt'
    shell:
        '%s/unimog2adjacencies.py {input} > {output}'%SCRIPT_DIR

rule add_all_adj:
    input:
        adj='leaf_adj/{sample}.txt',
        tree='cptrees/{sample}.txt'
    output:
        'full_adj/{sample}.txt'
    shell:
        '%s/add_all_adjacencies_inner.py {input.tree} {input.adj} > {output}'%SCRIPT_DIR